package com.wobbz.module.networkguard

import android.app.AlertDialog
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.preference.PreferenceFragmentCompat
import androidx.preference.PreferenceScreen
import com.wobbz.framework.settings.SettingsProvider
import com.wobbz.framework.settings.SettingsUIGenerator

/**
 * Main activity for NetworkGuard module.
 * Provides a settings interface for configuring network monitoring and blocking.
 */
class MainActivity : AppCompatActivity() {
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        try {
            // Create settings fragment
            val settingsFragment = NetworkGuardSettingsFragment()
            
            // Show the settings fragment
            supportFragmentManager.beginTransaction()
                .replace(android.R.id.content, settingsFragment)
                .commit()
                
        } catch (e: Exception) {
            // Fallback to info dialog if settings generation fails
            showModuleInfo()
        }
    }
    
    private fun showModuleInfo() {
        val message = buildString {
            appendLine("NetworkGuard Module")
            appendLine()
            appendLine("This module monitors and controls network access for applications.")
            appendLine()
            appendLine("Key Features:")
            appendLine("‚Ä¢ Monitor all network connections")
            appendLine("‚Ä¢ Block connections by default or with custom rules")
            appendLine("‚Ä¢ Log allowed and blocked connections")
            appendLine("‚Ä¢ Package-based filtering and rules")
            appendLine()
            appendLine("System Framework Targeting:")
            appendLine("‚Ä¢ RECOMMENDED: Enable 'System Framework' in LSPosed scope")
            appendLine("‚Ä¢ Required for monitoring system network calls")
            appendLine("‚Ä¢ App-specific targeting only monitors selected apps")
            appendLine()
            appendLine("Security Note:")
            appendLine("‚Ä¢ 'Block by default' can break system functionality")
            appendLine("‚Ä¢ Test rules carefully before enabling")
            appendLine("‚Ä¢ Ensure critical system apps are excluded")
            appendLine()
            appendLine("In LSPosed Manager:")
            appendLine("1. Enable this module")
            appendLine("2. Select 'System Framework' for system-wide monitoring")
            appendLine("3. Reboot device")
        }
        
        AlertDialog.Builder(this)
            .setTitle("NetworkGuard Settings")
            .setMessage(message)
            .setPositiveButton("OK") { _, _ -> finish() }
            .setOnCancelListener { finish() }
            .show()
    }
    
    /**
     * Settings fragment that generates UI from settings.json schema
     */
    class NetworkGuardSettingsFragment : PreferenceFragmentCompat() {
        
        override fun onCreatePreferences(savedInstanceState: Bundle?, rootKey: String?) {
            val context = preferenceManager.context
            val screen = preferenceManager.createPreferenceScreen(context)
            preferenceScreen = screen
            
            try {
                // Get settings provider for this module
                val settingsProvider = SettingsProvider.of(context)
                
                // Generate preferences from settings.json schema
                SettingsUIGenerator.generatePreferences(context, settingsProvider, screen)
                
                // Add helpful notes about targeting and security
                addTargetingHelpPreference(screen)
                addSecurityWarningPreference(screen)
                
            } catch (e: Exception) {
                // Add error preference if generation fails
                addErrorPreference(screen, e.message ?: "Unknown error")
            }
        }
        
        private fun addTargetingHelpPreference(screen: PreferenceScreen) {
            val helpPreference = androidx.preference.Preference(requireContext()).apply {
                key = "targeting_help"
                title = "üåê Network Monitoring Scope"
                summary = "Tap for help with system framework vs app-specific monitoring"
                
                setOnPreferenceClickListener {
                    val helpMessage = buildString {
                        appendLine("Network Monitoring Scope:")
                        appendLine()
                        appendLine("System Framework (RECOMMENDED):")
                        appendLine("‚Ä¢ Enable 'System Framework' in LSPosed scope")
                        appendLine("‚Ä¢ Monitors ALL network calls system-wide")
                        appendLine("‚Ä¢ Required for system app network control")
                        appendLine("‚Ä¢ Catches low-level network operations")
                        appendLine()
                        appendLine("App-Specific Targeting:")
                        appendLine("‚Ä¢ Only monitors selected applications")
                        appendLine("‚Ä¢ Limited system network visibility")
                        appendLine("‚Ä¢ Good for testing specific apps")
                        appendLine()
                        appendLine("Package Filtering:")
                        appendLine("‚Ä¢ Use 'Monitor all apps' for comprehensive coverage")
                        appendLine("‚Ä¢ Exclude critical system packages")
                        appendLine("‚Ä¢ Default excludes: SystemUI, Settings, LSPosed")
                        appendLine()
                        appendLine("Performance Note:")
                        appendLine("‚Ä¢ System-wide monitoring may impact performance")
                        appendLine("‚Ä¢ Use logging carefully in production")
                    }
                    
                    AlertDialog.Builder(context)
                        .setTitle("Network Monitoring Guide")
                        .setMessage(helpMessage)
                        .setPositiveButton("OK", null)
                        .show()
                    
                    true
                }
            }
            
            screen.addPreference(helpPreference)
        }
        
        private fun addSecurityWarningPreference(screen: PreferenceScreen) {
            val securityPreference = androidx.preference.Preference(requireContext()).apply {
                key = "security_warning"
                title = "‚ö†Ô∏è Security Warning"
                summary = "Important information about blocking network access"
                
                setOnPreferenceClickListener {
                    val securityMessage = buildString {
                        appendLine("Security & Stability Considerations:")
                        appendLine()
                        appendLine("Block by Default:")
                        appendLine("‚Ä¢ Can break essential system functions")
                        appendLine("‚Ä¢ May prevent updates and time sync")
                        appendLine("‚Ä¢ Can cause app crashes and instability")
                        appendLine("‚Ä¢ Use only for testing or specific needs")
                        appendLine()
                        appendLine("Critical System Packages:")
                        appendLine("‚Ä¢ Always exclude system UI and settings")
                        appendLine("‚Ä¢ Exclude LSPosed manager itself")
                        appendLine("‚Ä¢ Consider excluding core system services")
                        appendLine()
                        appendLine("Testing Rules:")
                        appendLine("‚Ä¢ Test with non-critical apps first")
                        appendLine("‚Ä¢ Have a way to disable the module")
                        appendLine("‚Ä¢ Monitor system stability")
                        appendLine("‚Ä¢ Check logs for blocked system calls")
                        appendLine()
                        appendLine("Recovery:")
                        appendLine("‚Ä¢ Disable module in LSPosed if issues occur")
                        appendLine("‚Ä¢ Safe mode can bypass module loading")
                        appendLine("‚Ä¢ Keep rule updates conservative")
                    }
                    
                    AlertDialog.Builder(context)
                        .setTitle("Security Warning")
                        .setMessage(securityMessage)
                        .setPositiveButton("OK", null)
                        .show()
                    
                    true
                }
            }
            
            screen.addPreference(securityPreference)
        }
        
        private fun addErrorPreference(screen: PreferenceScreen, error: String) {
            val errorPreference = androidx.preference.Preference(requireContext()).apply {
                key = "settings_error"
                title = "‚ö†Ô∏è Settings Error"
                summary = "Failed to load settings: $error"
                isEnabled = false
            }
            
            screen.addPreference(errorPreference)
        }
    }
} 